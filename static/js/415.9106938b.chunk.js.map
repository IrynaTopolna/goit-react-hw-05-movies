{"version":3,"file":"static/js/415.9106938b.chunk.js","mappings":"4MAGaA,EAAOC,EAAAA,GAAAA,GAAH,yKAUJC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,wUAYVG,EAAMH,EAAAA,GAAAA,IAAH,8EAMHI,EAAQJ,EAAAA,GAAAA,EAAH,+D,yBCxBH,SAASK,EAAT,GAAoC,IAAXC,EAAU,EAAVA,OAChCC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACT,EAAD,UACGO,EAAOG,KAAI,SAAAC,GAAK,OACf,UAACT,EAAD,CACEU,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMP,GAFjB,UAKGG,EAAMK,aACL,SAACZ,EAAD,CACEa,IAAG,UAfC,wCAeD,OAAiBN,EAAMK,aAC1BE,IAAKP,EAAMQ,MACXC,MAAM,SAGR,SAAChB,EAAD,CAAKa,IAAKI,EAAUH,IAAKP,EAAMQ,SAEjC,SAACd,EAAD,UAAQM,EAAMQ,UAXTR,EAAME,GAJE,KAoBtB,C,6HCzBc,SAASS,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOhB,EAAP,KAAeiB,EAAf,KACA,GAA4BD,EAAAA,EAAAA,UAAS,QAArC,eAAOE,EAAP,KAAeC,EAAf,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,WACRD,EAAU,YAEVE,EAAAA,EAAAA,IATY,uBAUTC,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAGXC,QAAQC,OAAO,QACvB,IACAL,MAAK,SAAAtB,GAC0B,IAA1BA,EAAO4B,QAAQC,QAInBZ,EAAUjB,EAAO4B,SACjBT,EAAU,aAJRA,EAAU,WAKb,IACAW,OAAM,SAAAC,GACLZ,EAAU,WACX,GACJ,GAAE,KAGD,2BACc,YAAXD,IACC,SAAC,KAAD,CACEc,YAAY,UACZC,YAAY,IACZC,kBAAkB,OAClBrB,MAAM,MACNsB,SAAS,IAGD,aAAXjB,IACC,oEAEU,aAAXA,IAAyB,SAAC,IAAD,CAAelB,OAAQA,MAGtD,C,uJCpDD,IAAMoC,EAAW,gCACXC,EAAU,mCAEHhB,EAAY,SAAAiB,GAEvB,OADiBC,MAAM,GAAD,OAAIH,GAAJ,OAAeE,EAAf,oBAAkCD,GAEzD,EAEYG,EAAmB,SAAAC,GAI9B,OAHiBF,MAAM,GAAD,OACjBH,EADiB,gCACeC,EADf,kBACgCI,GAGvD,EAEYC,EAAkB,SAAAC,GAE7B,OADiBJ,MAAM,GAAD,OAAIH,EAAJ,iBAAqBO,EAArB,oBAAwCN,GAE/D,EAEYO,EAAiB,SAAAD,GAI5B,OAHiBJ,MAAM,GAAD,OACjBH,EADiB,iBACAO,EADA,4BAC2BN,GAGlD,EAEYQ,EAAkB,SAAAF,GAI7B,OAHiBJ,MAAM,GAAD,OACjBH,EADiB,iBACAO,EADA,4BAC2BN,GAGlD,C","sources":["components/MoviesGallery/MoviesGallery.styled.jsx","components/MoviesGallery/MoviesGallery.jsx","pages/Home.jsx","services/movies-api.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  // justify-content: space-between;\n  gap: 20px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const StyledLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 150px;\n  border-radius: 2px;\n  background-color: #e1e0de;\n  text-align: center;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Img = styled.img`\n  width: 142px;\n  margin: 4px;\n  margin-bottom: 0;\n`;\n\nexport const Title = styled.p`\n  margin: 10px 0;\n  font-size: 18px;\n`;\n","import { Img, List, StyledLink, Title } from './MoviesGallery.styled';\nimport noPoster from '../noPoster.png';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst posterWay = 'https://image.tmdb.org/t/p/original/';\n\nexport default function MoviesGallery({ movies }) {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(movie => (\n        <StyledLink\n          to={`/movies/${movie.id}`}\n          state={{ from: location }}\n          key={movie.id}\n        >\n          {movie.poster_path ? (\n            <Img\n              src={`${posterWay}${movie.poster_path}`}\n              alt={movie.title}\n              width=\"142\"\n            />\n          ) : (\n            <Img src={noPoster} alt={movie.title} />\n          )}\n          <Title>{movie.title}</Title>\n        </StyledLink>\n      ))}\n    </List>\n  );\n}\n\nMoviesGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import MoviesGallery from 'components/MoviesGallery';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useState, useEffect } from 'react';\nimport { getMovies } from 'services/movies-api';\n\nconst request = 'trending/movie/week';\n\nexport default function Home() {\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    setStatus('pending');\n\n    getMovies(request)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        return Promise.reject('Error');\n      })\n      .then(movies => {\n        if (movies.results.length === 0) {\n          setStatus('rejected');\n          return;\n        }\n        setMovies(movies.results);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setStatus('rejected');\n      });\n  }, []);\n\n  return (\n    <div>\n      {status === 'pending' && (\n        <RotatingLines\n          strokeColor=\"#F9721F\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"150\"\n          visible={true}\n        />\n      )}\n      {status === 'rejected' && (\n        <h1>Something went wrong. Please, try again</h1>\n      )}\n      {status === 'resolved' && <MoviesGallery movies={movies} />}\n    </div>\n  );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '5e4720626ca4c6cc9f658e6222926a8a';\n\nexport const getMovies = request => {\n  const response = fetch(`${BASE_URL}${request}?api_key=${API_KEY}`);\n  return response;\n};\n\nexport const getMoviesByQuery = query => {\n  const response = fetch(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response;\n};\n\nexport const getMovieDetails = movieId => {\n  const response = fetch(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}`);\n  return response;\n};\n\nexport const getMovieActors = movieId => {\n  const response = fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const getMovieReviews = movieId => {\n  const response = fetch(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n};\n"],"names":["List","styled","StyledLink","Link","Img","Title","MoviesGallery","movies","location","useLocation","map","movie","to","id","state","from","poster_path","src","alt","title","width","noPoster","Home","useState","setMovies","status","setStatus","useEffect","getMovies","then","response","ok","json","Promise","reject","results","length","catch","error","strokeColor","strokeWidth","animationDuration","visible","BASE_URL","API_KEY","request","fetch","getMoviesByQuery","query","getMovieDetails","movieId","getMovieActors","getMovieReviews"],"sourceRoot":""}