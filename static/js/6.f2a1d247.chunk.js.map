{"version":3,"file":"static/js/6.f2a1d247.chunk.js","mappings":"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","sources":["components/MoviesGallery/MoviesGallery.styled.jsx","components/MoviesGallery/MoviesGallery.jsx","pages/Movies.styled.jsx","pages/Movies.jsx","services/movies-api.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  // justify-content: space-between;\n  gap: 20px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const StyledLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 150px;\n  border-radius: 2px;\n  background-color: #e1e0de;\n  text-align: center;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Img = styled.img`\n  width: 142px;\n  margin: 4px;\n  margin-bottom: 0;\n`;\n\nexport const Title = styled.p`\n  margin: 10px 0;\n  font-size: 18px;\n`;\n","import { Img, List, StyledLink, Title } from './MoviesGallery.styled';\nimport noPoster from '../noPoster.png';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst posterWay = 'https://image.tmdb.org/t/p/original/';\n\nexport default function MoviesGallery({ movies }) {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(movie => (\n        <StyledLink\n          to={`/movies/${movie.id}`}\n          state={{ from: location }}\n          key={movie.id}\n        >\n          {movie.poster_path ? (\n            <Img\n              src={`${posterWay}${movie.poster_path}`}\n              alt={movie.title}\n              width=\"142\"\n            />\n          ) : (\n            <Img src={noPoster} alt={movie.title} />\n          )}\n          <Title>{movie.title}</Title>\n        </StyledLink>\n      ))}\n    </List>\n  );\n}\n\nMoviesGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin-bottom: 16px;\n`;\n\nexport const Input = styled.input`\n  margin-right: 16px;\n  padding: 4px;\n`;\n\nexport const Button = styled.button`\n  border: 1px solid orange;\n  border-radius: 4px;\n  padding: 8px 16px;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: orange;\n  }\n`;\n","import { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport MoviesGallery from 'components/MoviesGallery';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesByQuery } from 'services/movies-api';\nimport { useEffect } from 'react';\nimport { Button, Form, Input } from './Movies.styled';\n\nexport default function Movies() {\n  const [status, setStatus] = useState('idle');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    setMovies([]);\n    setStatus('pending');\n\n    getMoviesByQuery(query)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n\n        return Promise.reject('Error');\n      })\n      .then(movies => {\n        if (movies.results.length === 0) {\n          setStatus('rejected');\n          return;\n        }\n        setMovies(movies.results);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setStatus('rejected');\n      });\n  }, [query]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const newQuery = evt.target.elements[0].value.trim().toLowerCase();\n\n    if (newQuery === '') {\n      toast.error('Please, enter your search request');\n      setSearchParams({});\n      return;\n    }\n\n    setSearchParams({ query: newQuery });\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies...\"\n          // value={query}\n        />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n      <div>\n        {status === 'pending' && (\n          <RotatingLines\n            strokeColor=\"#F9721F\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"150\"\n            visible={true}\n          />\n        )}\n        {status === 'rejected' && (\n          <h1>Something went wrong. Please, try again</h1>\n        )}\n        {status === 'resolved' && <MoviesGallery movies={movies} />}\n      </div>\n    </>\n  );\n}\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '5e4720626ca4c6cc9f658e6222926a8a';\n\nexport const getMovies = request => {\n  const response = fetch(`${BASE_URL}${request}?api_key=${API_KEY}`);\n  return response;\n};\n\nexport const getMoviesByQuery = query => {\n  const response = fetch(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response;\n};\n\nexport const getMovieDetails = movieId => {\n  const response = fetch(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}`);\n  return response;\n};\n\nexport const getMovieActors = movieId => {\n  const response = fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response;\n};\n\nexport const getMovieReviews = movieId => {\n  const response = fetch(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n};\n"],"names":["List","styled","StyledLink","Link","Img","Title","MoviesGallery","movies","location","useLocation","map","movie","to","id","state","from","poster_path","src","alt","title","width","noPoster","Form","Input","Button","Movies","useState","status","setStatus","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getMoviesByQuery","then","response","ok","json","Promise","reject","results","length","catch","error","onSubmit","evt","preventDefault","newQuery","target","elements","value","trim","toLowerCase","toast","type","autoComplete","autoFocus","placeholder","strokeColor","strokeWidth","animationDuration","visible","BASE_URL","API_KEY","getMovies","request","fetch","getMovieDetails","movieId","getMovieActors","getMovieReviews"],"sourceRoot":""}